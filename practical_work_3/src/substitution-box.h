#ifndef SUBSTITUTION_BOX_H_INCLUDED
#define SUBSTITUTION_BOX_H_INCLUDED

#include <array>
#include <tuple>
#include "definitions.h"

namespace SubstitutionBox {
        using namespace std;

    using Block = uint8_t;
    using Table = array<array<Block, 1 << BITS_PER_TETRAD>, 1 << BITS_PER_TETRAD>;

    const Table table {{
        {{0x18, 0xb0, 0x06, 0x89, 0x11, 0x57, 0x01, 0xba, 0xab, 0xae, 0xa1, 0xf7, 0x4b, 0x91, 0x38, 0x1a}},
        {{0xc6, 0x6c, 0x14, 0x3e, 0xbb, 0x0c, 0xf6, 0x98, 0x72, 0x33, 0xf2, 0x1d, 0x37, 0x05, 0xf9, 0xc7}},
        {{0xe2, 0x88, 0x8b, 0x7f, 0xe8, 0xd9, 0x9c, 0x71, 0x48, 0x58, 0xad, 0xce, 0x34, 0x7e, 0x0f, 0x56}},
        {{0x90, 0xf1, 0x99, 0x94, 0xb5, 0xdc, 0x9b, 0x97, 0x84, 0x3d, 0xa9, 0xa7, 0x75, 0x4c, 0x55, 0xb3}},
        {{0x6d, 0x52, 0x92, 0x9f, 0x2c, 0x09, 0x86, 0x4a, 0x45, 0xeb, 0x5d, 0x7a, 0xe9, 0x7c, 0x43, 0x40}},
        {{0xd7, 0x22, 0xb9, 0x82, 0xf5, 0xe1, 0x41, 0x8d, 0x2f, 0x60, 0x08, 0xe4, 0x6a, 0x44, 0x15, 0x2d}},
        {{0x85, 0xde, 0x59, 0x04, 0xc9, 0x69, 0x0e, 0x79, 0x25, 0x20, 0x4f, 0xbf, 0x3f, 0xc5, 0x8c, 0xa3}},
        {{0x42, 0x1c, 0x54, 0x64, 0xaa, 0x78, 0x8e, 0xc8, 0xd4, 0x9d, 0x61, 0x03, 0x87, 0xc4, 0x46, 0x07}},
        {{0xda, 0x36, 0xa8, 0x73, 0xf4, 0x2b, 0x7b, 0xfb, 0xb1, 0x0d, 0x70, 0xaf, 0x2a, 0x3a, 0x4d, 0x1e}},
        {{0xee, 0xff, 0xc2, 0x9a, 0x53, 0x35, 0x96, 0xe5, 0x0b, 0xed, 0xef, 0x5b, 0x02, 0xcd, 0xa5, 0x6e}},
        {{0x17, 0x29, 0xf3, 0xbe, 0xd5, 0xd1, 0x81, 0x16, 0xfc, 0x80, 0x50, 0x28, 0xdd, 0x83, 0x67, 0x2e}},
        {{0x5e, 0xc0, 0xd0, 0x31, 0xca, 0x39, 0xb2, 0xa0, 0xfa, 0x26, 0xec, 0x10, 0x30, 0x13, 0x32, 0x24}},
        {{0x77, 0xd8, 0xac, 0xd2, 0x6f, 0x93, 0xd6, 0x5c, 0x49, 0x1f, 0x95, 0xea, 0xbd, 0x21, 0x3c, 0xf0}},
        {{0x23, 0xcf, 0x8f, 0xe6, 0xd3, 0x5a, 0x5f, 0xe3, 0xfe, 0x00, 0xdb, 0x68, 0x62, 0xbc, 0x8a, 0x74}},
        {{0xb6, 0x4e, 0x65, 0x66, 0x1b, 0x27, 0x47, 0x51, 0xa2, 0x7d, 0xa4, 0x6b, 0x9e, 0x0a, 0x76, 0xcb}},
        {{0xa6, 0xe0, 0xe7, 0xfd, 0x12, 0xb8, 0x63, 0xc1, 0xc3, 0xb7, 0xf8, 0xb4, 0xcc, 0x3b, 0xdf, 0x19}},
    }};

    tuple<Block, Block> getTetradsOfByte(const Block& block) {
        const Block highTetrad = (block & HIGH_TETRAD_MASK) >> BITS_PER_TETRAD;
        const Block lowTetrad = block & LOW_TETRAD_MASK;

        return tuple(highTetrad, lowTetrad);
    }

    Table getReverseTable(const Table& table) {
        Table reverseTable;

        for (size_t i = 0; i < table.size(); ++i) {
            for (size_t j = 0; j < table[i].size(); ++j) {
                size_t row, column;
                tie(row, column) = getTetradsOfByte(table[i][j]);
                reverseTable[row][column] = i * table.size() + j;
            }
        }

        return reverseTable;
    }

    Block convertBlock(const Block& block, const Table& table) {
        size_t highTetrad, lowTetrad;
        tie(highTetrad, lowTetrad) = getTetradsOfByte(block);

        return table[highTetrad][lowTetrad];
    }

    Block encrypt(const Block& block) {
        return convertBlock(block, table);
    }

    Block decrypt(const Block& block) {
        return convertBlock(block, getReverseTable(table));
    }
}

#endif // SUBSTITUTION_BOX_H_INCLUDED
